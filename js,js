const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

// Игрок
const player = {
    x: canvas.width / 2,
    y: canvas.height / 2,
    radius: 15,
    speed: 5,
    angle: 0,
    bullets: [],
};

// Стены
const walls = [
    { x: 100, y: 100, width: 200, height: 20 },
    { x: 400, y: 150, width: 20, height: 200 },
    { x: 150, y: 300, width: 250, height: 20 },
    { x: 300, y: 400, width: 20, height: 200 },
    { x: 50, y: 50, width: 20, height: 300 },
    { x: 600, y: 100, width: 20, height: 300 },
    { x: 200, y: 500, width: 400, height: 20 },
    { x: 500, y: 300, width: 100, height: 20 },
];

const rooms = [
    {
        enemies: [
            { x: 100, y: 100, radius: 10, health: 3 },
            { x: 200, y: 150, radius: 10, health: 3 },
        ],
        boss: false,
    },
    {
        enemies: [
            { x: 300, y: 200, radius: 10, health: 3 },
            { x: 400, y: 250, radius: 10, health: 3 },
            { x: 500, y: 300, radius: 10, health: 3 },
        ],
        boss: true,
    },
    {
        enemies: [],
        boss: false,
    },
];

let currentRoomIndex = 0;

function drawPlayer() {
    ctx.fillStyle = 'blue';
    ctx.beginPath();
    ctx.arc(player.x, player.y, player.radius, 0, Math.PI * 2);
    ctx.fill();
}

function drawEnemies() {
    ctx.fillStyle = 'red';
    rooms[currentRoomIndex].enemies.forEach(enemy => {
        ctx.beginPath();
        ctx.arc(enemy.x, enemy.y, enemy.radius, 0, Math.PI * 2);
        ctx.fill();
    });
}

function drawBoss() {
    if (rooms[currentRoomIndex].boss) {
        ctx.fillStyle = 'purple';
        ctx.beginPath();
        ctx.arc(canvas.width / 2, canvas.height / 4, 30, 0, Math.PI * 2);
        ctx.fill();
    }
}

function drawBullets() {
    ctx.fillStyle = 'yellow';
    player.bullets.forEach(bullet => {
        ctx.beginPath();
        ctx.arc(bullet.x, bullet.y, bullet.radius, 0, Math.PI * 2);
        ctx.fill();
    });
}

function drawWalls() {
    ctx.fillStyle = 'gray';
    walls.forEach(wall => {
        ctx.fillRect(wall.x, wall.y, wall.width, wall.height);
    });
}

function updateBullets() {
    player.bullets.forEach((bullet, index) => {
        bullet.x += bullet.speed * Math.cos(bullet.angle);
        bullet.y += bullet.speed * Math.sin(bullet.angle);
        if (bullet.x < 0 || bullet.x > canvas.width || bullet.y < 0 || bullet.y > canvas.height) {
            player.bullets.splice(index, 1);
        }
    });
}

function checkCollisions() {
    const room = rooms[currentRoomIndex];
    player.bullets.forEach((bullet, bulletIndex) => {
        room.enemies.forEach((enemy, enemyIndex) => {
            const dx = bullet.x - enemy.x;
            const dy = bullet.y - enemy.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < bullet.radius + enemy.radius) {
                enemy.health--;
                player.bullets.splice(bulletIndex, 1);
                if (enemy.health <= 0) {
                    room.enemies.splice(enemyIndex, 1);
                }
            }
        });

        // Проверка на столкновение с боссом
        if (room.boss) {
            const dx = bullet.x - (canvas.width / 2);
            const dy = bullet.y - (canvas.height / 4);
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < bullet.radius + 30) {
                player.bullets.splice(bulletIndex, 1);
            }
        }
    });

    // Проверка на столкновение с стенами
    walls.forEach(wall => {
        player.bullets.forEach((bullet, bulletIndex) => {
            if (bullet.x > wall.x && bullet.x < wall.x + wall.width &&
                bullet.y > wall.y && bullet.y < wall.y + wall.height) {
                player.bullets.splice(bulletIndex, 1);
            }
        });
    });
}

function resetRoom() {
    const room = rooms[currentRoomIndex];
    if (room.enemies.length === 0 && !room.boss) {
        currentRoomIndex++;
        if (currentRoomIndex >= rooms.length) {
            alert('Вы победили все комнаты!');
            currentRoomIndex = 0; // Сброс к первой комнате
        }
        spawnEnemies();
    }
}

function spawnEnemies() {
    const room = rooms[currentRoomIndex];
    if (room.enemies.length === 0 && !room.boss) {
        // Здесь можно добавить логику для спавна врагов
    }
}

function checkPlayerCollision(dx, dy) {
    for (const wall of walls) {
        if (player.x + dx + player.radius > wall.x && player.x + dx - player.radius < wall.x + wall.width &&
            player.y + dy + player.radius > wall.y && player.y + dy - player.radius < wall.y + wall.height) {
            return true; // Столкновение со стеной
        }
    }
    return false; // Нет столкновения
}

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawWalls(); // Рисуем стены
    drawPlayer();
    drawEnemies();
    drawBoss();
    drawBullets();
    updateBullets();
    checkCollisions();
    resetRoom();
    requestAnimationFrame(gameLoop);
}

document.addEventListener('keydown', (event) => {
    let dx = 0;
    let dy = 0;

    if (event.code === 'KeyW') {
        dy = -player.speed; // Вверх
    }
    if (event.code === 'KeyS') {
        dy = player.speed; // Вниз
    }
    if (event.code === 'KeyA') {
        dx = -player.speed; // Влево
    }
    if (event.code === 'KeyD') {
        dx = player.speed; // Вправо
    }

    // Проверка на столкновение перед движением
    if (!checkPlayerCollision(dx, dy)) {
        player.x += dx;
        player.y += dy;
    }
});

document.addEventListener('mousedown', (event) => {
    if (event.button === 0) { // ЛКМ
        const bullet = {
            x: player.x,
            y: player.y,
            radius: 5,
            speed: 7,
            angle: player.angle
        };
        player.bullets.push(bullet);
    }
});

document.addEventListener('mousemove', (event) => {
    const dx = event.clientX - player.x;
    const dy = event.clientY - player.y;
    player.angle = Math.atan2(dy, dx);
});

// Обработчик события для изменения размера канваса
window.addEventListener('resize', resizeCanvas);

// Инициализация канваса и запуск игры
resizeCanvas();
gameLoop();
